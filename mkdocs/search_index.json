{
    "docs": [
        {
            "location": "/", 
            "text": "ThemeScheduler\n\n\nChange theme and color scheme by the time of day.\n\n\n\n\nThemeScheduler\n\n\nSublime plugin to change your theme or apply filters to your theme at different times of the day.\n\n\nFeatures\n\n\n\n\nChange your theme based on the time of day.\n\n\nChange your color scheme based on the time of day.\n\n\nNotifications at different times (SubNotify support available).\n\n\nOptionally use ThemeTweaker to apply color filters.", 
            "title": "About ThemeScheduler"
        }, 
        {
            "location": "/#themescheduler", 
            "text": "Change theme and color scheme by the time of day.", 
            "title": "ThemeScheduler"
        }, 
        {
            "location": "/#themescheduler_1", 
            "text": "Sublime plugin to change your theme or apply filters to your theme at different times of the day.", 
            "title": "ThemeScheduler"
        }, 
        {
            "location": "/#features", 
            "text": "Change your theme based on the time of day.  Change your color scheme based on the time of day.  Notifications at different times (SubNotify support available).  Optionally use ThemeTweaker to apply color filters.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling ThemeScheduler.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install ThemeScheduler is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nThemeScheduler\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install ThemeScheduler for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ThemeScheduler.git ThemeScheduler\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing ThemeScheduler.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install ThemeScheduler is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  ThemeScheduler ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install ThemeScheduler for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ThemeScheduler.git ThemeScheduler    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of ThemeScheduler.\n\n\n\n\nGeneral Use\n\n\nSet your rules in \nUser/ThemeScheduler.sublime-settings\n (it will automatically be created).  Then set \nenabled\n:\n \nTrue\n.\n\n\nOptional Dependencies\n\n\n\n\nApplying filters requires \nThemeTweaker plugin\n.\n\n\nAlternative notifications require the \nSubNotify plugin\n.\n\n\n\n\nExamples\n\n\nChanging Themes\n\n\n    \nthemes\n:\n\n    \n[\n\n        \n{\n\n            \ntheme\n:\n \nPackages/User/Color Scheme/sometheme.tmTheme\n,\n\n            \ntime\n:\n \n21:30\n\n        \n},\n\n        \n{\n\n            \ntheme\n:\n \nPackages/User/Color Scheme/someothertheme.tmTheme\n,\n\n            \ntime\n:\n \n8:30\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nUsing filters\n\n\nSee ThemeTweaker\ns \ncustom filter documentationn\n for more info on configuring filter options.  The \nfilters\n argument is constructed the same way.\n\n\n    \nthemes\n:\n\n    \n[\n\n        \n{\n\n            \ntheme\n:\n \nPackages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme\n,\n\n            \nfilters\n:\n \nbrightness(.98)@bg\n,\n\n            \ntime\n:\n \n10:00\n\n        \n},\n\n        \n{\n\n            \ntheme\n:\n \nPackages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme\n,\n\n            \nfilters\n:\n \nbrightness(.97)@bg;glow(.1)\n,\n\n            \ntime\n:\n \n11:00\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nDisplaying Messages at Theme Change\n\n\nMessages will be done through the Sublime API via a popup dialog or status bar.  If you are using the \nSubNotify plugin\n with the \nuse_sub_notify\n option enabled in the settings file, messages will be displayed through SubNotify.\n\n\n    \nthemes\n:\n\n    \n[\n\n        \n{\n\n            \n// Lunch\n\n            \ntheme\n:\n \nPackages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme\n,\n\n            \nfilters\n:\n \nbrightness(.96)@bg;glow(.1)\n,\n\n            \ntime\n:\n \n12:00\n,\n\n            \nmsg\n:\n \nLunch time!\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nSetting the UI Theme\n\n\nWhen changing a theme, Sublime may look funny because it does not refresh all of the UI.  You can try resizing the window, moving the element (like a tab) or restart Sublime.  ThemeScheduler has no control over this, so if the results are unsatisfactory, or you find yourself restarting Sublime to clear the glitches, then this feature may not be one that you want to use.  If in the future, Sublime handles theme refresh better on theme changes, this feature may become even more useful.\n\n\n{\n\n    \n// Lunch\n\n    \ntheme\n:\n \nPackages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme\n,\n\n    \nfilters\n:\n \nbrightness(.96)@bg;glow(.1)\n,\n\n    \ntime\n:\n \n12:00\n,\n\n    \nmsg\n:\n \nLunch time!\n,\n\n    \nui_theme\n:\n \nAprosopo Dark@st3.sublime-theme\n,\n\n    \ntime\n:\n \n21:00\n\n\n},\n\n\n\n\n\n\nRun a Sublime ApplicationCommand\n\n\nThemeScheduler allows setting a specific command with arguments.  ThemeScheduler currently, only allows \nApplication\n commands to be run on change.  You can work around this by simply writing an application command that wraps around view or windows commands if you absolutely have to run them.\n\n\n{\n\n    \n// Lunch\n\n    \ntheme\n:\n \nPackages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme\n,\n\n    \nfilters\n:\n \nbrightness(.96)@bg;glow(.1)\n,\n\n    \ntime\n:\n \n12:00\n,\n\n    \nmsg\n:\n \nLunch time!\n,\n\n    \ncommand\n:\n \n{\n\n        \ncommand\n:\n \nset_aprosopo_theme\n,\n \nargs\n:\n\n        \n{\n\n            \ntheme\n:\n \nlight\n,\n\n            \ncolor\n:\n \nblue\n\n        \n}\n\n    \n},\n\n    \ntime\n:\n \n21:00\n\n\n},\n\n\n\n\n\n\nSettings\n\n\nTheme Scheduler has only a small handful of settings outside the theme change rules.\n\n\nenabled\n\n\nThis is a boolean that controls whether ThemeScheduler is active.\n\n\nenabled\n:\n \ntrue\n\n\n\n\n\n\nuse_sub_notify\n\n\nTo use \nSubNotify plugin\n for notification messages, just enable SubNotify usage with this setting (assuming SubNotify has been installed).\n\n\nuse_sub_notify\n:\n \ntrue\n,\n\n\n\n\n\n\nthemes\n\n\nThis is an array of all your ThemeScheduler rules.\n\n\nthemes\n:\n \n[\n\n    \n{\n\n        \n// Lunch\n\n        \ntheme\n:\n \nPackages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme\n,\n\n        \nfilters\n:\n \nbrightness(.96)@bg;glow(.1)\n,\n\n        \ntime\n:\n \n12:00\n,\n\n        \nmsg\n:\n \nLunch time!\n,\n\n        \nui_theme\n:\n \nAprosopo Dark@st3.sublime-theme\n,\n\n        \ntime\n:\n \n21:00\n\n    \n}\n\n\n]", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of ThemeScheduler.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#general-use", 
            "text": "Set your rules in  User/ThemeScheduler.sublime-settings  (it will automatically be created).  Then set  enabled :   True .  Optional Dependencies   Applying filters requires  ThemeTweaker plugin .  Alternative notifications require the  SubNotify plugin .", 
            "title": "General Use"
        }, 
        {
            "location": "/usage/#examples", 
            "text": "Changing Themes       themes : \n     [ \n         { \n             theme :   Packages/User/Color Scheme/sometheme.tmTheme , \n             time :   21:30 \n         }, \n         { \n             theme :   Packages/User/Color Scheme/someothertheme.tmTheme , \n             time :   8:30 \n         } \n     ]   Using filters  See ThemeTweaker s  custom filter documentationn  for more info on configuring filter options.  The  filters  argument is constructed the same way.       themes : \n     [ \n         { \n             theme :   Packages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme , \n             filters :   brightness(.98)@bg , \n             time :   10:00 \n         }, \n         { \n             theme :   Packages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme , \n             filters :   brightness(.97)@bg;glow(.1) , \n             time :   11:00 \n         } \n     ]   Displaying Messages at Theme Change  Messages will be done through the Sublime API via a popup dialog or status bar.  If you are using the  SubNotify plugin  with the  use_sub_notify  option enabled in the settings file, messages will be displayed through SubNotify.       themes : \n     [ \n         { \n             // Lunch \n             theme :   Packages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme , \n             filters :   brightness(.96)@bg;glow(.1) , \n             time :   12:00 , \n             msg :   Lunch time! \n         } \n     ]   Setting the UI Theme  When changing a theme, Sublime may look funny because it does not refresh all of the UI.  You can try resizing the window, moving the element (like a tab) or restart Sublime.  ThemeScheduler has no control over this, so if the results are unsatisfactory, or you find yourself restarting Sublime to clear the glitches, then this feature may not be one that you want to use.  If in the future, Sublime handles theme refresh better on theme changes, this feature may become even more useful.  { \n     // Lunch \n     theme :   Packages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme , \n     filters :   brightness(.96)@bg;glow(.1) , \n     time :   12:00 , \n     msg :   Lunch time! , \n     ui_theme :   Aprosopo Dark@st3.sublime-theme , \n     time :   21:00  },   Run a Sublime ApplicationCommand  ThemeScheduler allows setting a specific command with arguments.  ThemeScheduler currently, only allows  Application  commands to be run on change.  You can work around this by simply writing an application command that wraps around view or windows commands if you absolutely have to run them.  { \n     // Lunch \n     theme :   Packages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme , \n     filters :   brightness(.96)@bg;glow(.1) , \n     time :   12:00 , \n     msg :   Lunch time! , \n     command :   { \n         command :   set_aprosopo_theme ,   args : \n         { \n             theme :   light , \n             color :   blue \n         } \n     }, \n     time :   21:00  },", 
            "title": "Examples"
        }, 
        {
            "location": "/usage/#settings", 
            "text": "Theme Scheduler has only a small handful of settings outside the theme change rules.  enabled  This is a boolean that controls whether ThemeScheduler is active.  enabled :   true   use_sub_notify  To use  SubNotify plugin  for notification messages, just enable SubNotify usage with this setting (assuming SubNotify has been installed).  use_sub_notify :   true ,   themes  This is an array of all your ThemeScheduler rules.  themes :   [ \n     { \n         // Lunch \n         theme :   Packages/User/Color Scheme/Tomorrow-Night-Eighties.tmTheme , \n         filters :   brightness(.96)@bg;glow(.1) , \n         time :   12:00 , \n         msg :   Lunch time! , \n         ui_theme :   Aprosopo Dark@st3.sublime-theme , \n         time :   21:00 \n     }  ]", 
            "title": "Settings"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nTheme Scheduler is released under the MIT license.\n\n\nCopyright \n 2012 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Theme Scheduler is released under the MIT license.  Copyright   2012 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}